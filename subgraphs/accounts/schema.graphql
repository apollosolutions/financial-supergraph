# noinspection GraphQLTypeRedefinition

"""
Require that the user is authenticated and verified as a real user in our system.
It does not enforce specific roles, just that header is properly defined.
For our example it just checks the existence of the `x-user-id` header in the request.
"""
directive @authenticated repeatable on OBJECT | FIELD_DEFINITION

"""
Require specific access to run resolvers of a field or object.
Default to requiring admin permissions to avoid accidental exposure.
If no auth is defined, it is open to all. See `@authenticated` for other combined usage.
The request role is parsed from the "x-user-id" header value.
"""
directive @hasRole(requires: Role = ADMIN) repeatable on OBJECT | FIELD_DEFINITION

"""
Used in the @hasRole directive to do directive-based authentication control.
See the docs for @hasRole for more info.
"""
enum Role {
  ADMIN
  PARTNER
  USER
  UNKNOWN
}

type Query {
  bankAccounts: AllBankAccounts @authenticated
}

type Mutation {
  "Mock opening a new checking account"
  openCheckingAccount(tier: BankAccountTier): OpenBankAccountResponse
  "Mock opening a new savings account"
  openSavingsAccount(tier: BankAccountTier): OpenBankAccountResponse
}

enum BankAccountType {
  CHECKING
  SAVINGS
}

enum BankAccountTier {
  BASIC
  PREMIUM
  VIP
}

type User @key(fields: "id") @hasRole(requires: USER) {
  id: ID!
  accounts: [BankAccount]
}

type BankAccount @key(fields: "id") {
  id: ID!
  name: String
  type: BankAccountType
  tier: BankAccountTier
  user: User
}

type OpenBankAccountResponse {
  message: String
  success: Boolean
  account: BankAccount
}

type AllBankAccounts @tag(name: "bankAccounts") {
  all: [BankAccount]
  checking: [BankAccount]
  savings: [BankAccount]
}
